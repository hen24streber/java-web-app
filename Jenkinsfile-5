pipeline {
  agent {
    label 'linux'
  }
  environment {
    CONTAINER_IMAGE = 'darinpope/java-web-app:latest'
    TRIVY_VERSION='0.51.2'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  stages {
    stage('Build container image') {
      steps {
        sh 'docker build -t $CONTAINER_IMAGE .'
      }
    }
    stage('Trivy scan for image misconfiguration') {
      steps {
        script {
          def trivyMisconfigOutput = sh(script: "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:$TRIVY_VERSION --quiet image --no-progress --exit-code 0 --scanners misconfig,secret --image-config-scanners misconfig,secret --severity MEDIUM,HIGH,CRITICAL $CONTAINER_IMAGE", returnStdout: true).trim()
          // Display Trivy scan results
          println trivyMisconfigOutput
          // Check if vulnerabilities were found
          if (trivyMisconfigOutput.contains("Total: 0")) {
            echo "No vulnerabilities found in the Docker image."
          } else {
            echo "Vulnerabilities found in the Docker image."
            // You can take further actions here based on your requirements
            // For example, failing the build if vulnerabilities are found
            // error "Vulnerabilities found in the Docker image."
          }
        }
      }
     }
    stage('Trivy scan for image vulnerabilities') {
      steps {
        script {
          def trivyVulnOutput = sh(script: "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:$TRIVY_VERSION --quiet image --no-progress --exit-code 0 --scanners vuln --severity HIGH,CRITICAL $CONTAINER_IMAGE", returnStdout: true).trim()
          // Display Trivy scan results
          println trivyVulnOutput
          // Check if vulnerabilities were found
          if (trivyVulnOutput.contains("Total: 0")) {
            echo "No vulnerabilities found in the Docker image."
          } else {
            echo "Vulnerabilities found in the Docker image."
            // You can take further actions here based on your requirements
            // For example, failing the build if vulnerabilities are found
            // error "Vulnerabilities found in the Docker image."
          }
        }
      }
    }
  }
}
